// const { MongoClient } = require('mongodb');
import React, { useState } from 'react';
import { View, Text, Button, TextInput, Alert, ImageBackground, ScrollView } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { Picker } from '@react-native-picker/picker';
import DateTimePicker from '@react-native-community/datetimepicker';
import response from './responseValues';

// import { insertBookingData } from '../Backend/database'; // Import the insertBookingData function from database.js

// const uri = 'mongodb+srv://nisulihettiarachchi:NN0mTkjF7dKfihcA@cluster0.jptaxxz.mongodb.net/';
// const dbName = 'tech_triathlon';

export default function BookingPage({}) {
  const navigation = useNavigation();
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [fromLocation, setFromLocation] = useState('');
  const [toLocation, setToLocation] = useState('');
  const [tripDate, setTripDate] = useState(new Date());
  const [returnDate, setReturnDate] = useState(new Date());
  const [passengers, setPassengers] = useState('');
  const [selectedClass, setSelectedClass] = useState('Economy');
  const [showDatePicker, setShowDatePicker] = useState(false);

  const handleCancelPress = () => {
    navigation.goBack();
  };

//   async function insertBookingData(bookingQuery) {
//     const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });
  
//     try {
//         await client.connect();

//         const db = client.db(dbName);
//         const collection = db.collection('booking'); // Use 'payments' as the collection name

//         // const paymentData = {
//         //     paymentId: 1, // This will be auto-generated by MongoDB
//         //     userId: 1,
//         //     bookingId: 1,
//         //     amount: 11458,
//         //     method: 'Visa Debit Card',
//         //     paymentDate: new Date('2023-06-31 10:32:10.030') // Convert string to a Date object
//         // };
  
//         // const result = await collection.insertOne(paymentData);
//         const result = await collection.insertOne(bookingQuery);
//         console.log('booking data inserted:', result.insertedId);
//     } catch (error) {
//         console.error('Error inserting booking data:', error);
//     } finally {
//         client.close();
//     }
// }

  const handlePaymentPress = async () => {
    let errorMessage = '';

    // Validation checks here

    if (errorMessage !== '') {
      Alert.alert('Invalid Input', errorMessage);
      return;
    }

    // Update response data and navigate to PaymentPage
    response.fromLocation = fromLocation;
    response.toLocation = toLocation;
    response.tripDate = tripDate;
    response.returnDate = returnDate;
    response.passengers = passengers;
    response.selectedClass = selectedClass;
    response.name = name;
    response.email = email;

    // await insertBookingData(response); 

    navigation.navigate('PaymentPage', response);
  };

  // insertBookingData(response);

  console.log(response);

  const handleTripDateChange = (event, selectedDate) => {
    setShowDatePicker(false);
    if (selectedDate !== undefined) {
      setTripDate(selectedDate);
    }
  };

  const handleReturnDateChange = (event, selectedDate) => {
    setShowDatePicker(false);
    if (selectedDate !== undefined) {
      setReturnDate(selectedDate);
    }
  };

  return (
    <ImageBackground
      source={require('../assets/images/mainbg.jpg')}
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
    >
      <ScrollView contentContainerStyle={{ flexGrow: 1, alignItems: 'center', justifyContent: 'center' }}>
        <View style={{ backgroundColor: 'rgba(255, 255, 255, 0.3)', padding: 40 }}>
          <Text style={{ textAlign:"center", color:"#FFFFFF", fontSize: 25, marginBottom: 10 }}>Booking Page</Text>
  
          <TextInput
            placeholder="Name"
            value={name}
            onChangeText={setName}
            style={{ marginBottom: 10, padding: 5, borderWidth: 1, fontSize: 20, textAlign: "center"}}
            color="#fff" 
            placeholderTextColor="#a7a9ab" 
          />
  
          <TextInput
            placeholder="Email"
            value={email}
            onChangeText={setEmail}
            style={{ marginBottom: 10, padding: 5, borderWidth: 1, fontSize: 20, textAlign: "center"}}
            color="#fff" 
            placeholderTextColor="#a7a9ab" 
          />

          <View>
          <Text style={{ fontSize: 20, fontWeight: "bold", marginBottom: 10, color: "#fff" }}>From</Text>
            <Picker
            selectedValue={fromLocation}
            onValueChange={(itemValue) => setFromLocation(itemValue)}
            style={{
              marginBottom: 10,
              padding: 10,
              borderWidth: 1,
              borderColor: 'black',
              borderRadius: 5,
            }}
            >
              <Picker.Item label="Planet 1" value="Planet 1" />
              <Picker.Item label="Planet 2" value="Planet 2" />
              <Picker.Item label="Planet 3" value="Planet 3" />
              <Picker.Item label="Planet 4" value="Planet 4" />
              <Picker.Item label="Planet 5" value="Planet 5" />
              </Picker>
          </View>

          <View>
          <Text style={{ fontSize: 20, fontWeight: "bold", marginBottom: 10, color: "#fff" }}>To</Text>
            <Picker
            selectedValue={toLocation}
            onValueChange={(itemValue) => setToLocation(itemValue)}
            style={{
              marginBottom: 10,
              padding: 10,
              borderWidth: 1,
              borderColor: 'black',
              borderRadius: 5,
            }}
            >
              <Picker.Item label="Planet 1" value="Planet 1" />
              <Picker.Item label="Planet 2" value="Planet 2" />
              <Picker.Item label="Planet 3" value="Planet 3" />
              <Picker.Item label="Planet 4" value="Planet 4" />
              <Picker.Item label="Planet 5" value="Planet 5" />
              </Picker>
          </View>
  
          <Button title="Select Trip Date" onPress={() => setShowDatePicker(true)} color="#fff"/>
          <Text style={{fontSize:18}}>Trip Date: {tripDate.toDateString()}</Text>
  
          {showDatePicker && (
            <DateTimePicker
              value={tripDate}
              mode="date"
              onChange={handleTripDateChange}
            />
          )}
  
          <Button
            title="Select Return Date"
            onPress={() => setShowDatePicker(true)}
            style={{ marginBottom: 10, backgroundColor: '#0A6E73', padding: 10, borderRadius: 5 }}
            color="#fff"
          />
          <Text style={{fontSize:18}}>Return Date: {returnDate.toDateString()}</Text>
  
          {showDatePicker && (
            <DateTimePicker
              value={returnDate}
              mode="date"
              onChange={handleReturnDateChange}
            />
          )}
  
          <TextInput
            placeholder="Number of Passengers"
            value={passengers}
            onChangeText={setPassengers}
            keyboardType="numeric"
            style={{ marginBottom: 10, padding: 5, borderWidth: 1, fontSize: 20, textAlign: "center"}}
            color="#fff" 
            placeholderTextColor="#a7a9ab" 
          />
          
          <View style={{ alignItems: "center" }}>
          <Text style={{ fontSize: 20, fontWeight: "bold", marginBottom: 10, color: "#fff" }}>Class</Text>
            <Picker
            selectedValue={selectedClass}
            onValueChange={(itemValue) => setSelectedClass(itemValue)}
            style={{ marginBottom: 10, width: 200 }}
            >
              <Picker.Item label="Economy" value="Economy" />
              <Picker.Item label="Business" value="Business" />
              <Picker.Item label="First Class" value="First Class" />
            </Picker>
          </View>
          
          <Button
          title="Payment"
          onPress={handlePaymentPress}
          style={{
            padding: 10,
            borderRadius: 5,
          }}
          color="#fff" 
          />
          
          <Button
          title="Cancel"
          onPress={handleCancelPress}
          style={{
            padding: 10,
            borderRadius: 5,
            marginBottom: 10,
          }}
          color="#fff" 
          />
          
        </View>
      </ScrollView>
    </ImageBackground>
  );
};

console.log('final: ', response);